@page "/CustomerInteractions"
@using CRM.AzureBlobStorage.Interface
@using CRM.Data.DTO
@using Microsoft.AspNetCore.Authorization
@using CRM.Data
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Forms
@inject IBlobStorageService BlobStorageService


<h3>Customer Interactions</h3>

<EditForm Model="model" OnValidSubmit="OnSubmit" FormName="customer-interactions">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="col-12 col-md-8">
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <InputDate @bind-Value="model.InteractionDate" class="form-control" id="interactionDate" />
                <label for="assignedDate">Interaction Date</label>
                <ValidationMessage For="@(() => model.InteractionDate)" />
            </div>
        </div>
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="model.Comments"
                           class="form-control"
                           id="Comments"
                           placeholder="Customer comment"
                           width="150px"/>
            <label for="Comments">Customer Comments</label>
            <ValidationMessage For="@(() => model.Comments)" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-floating mb-3">
            <RadzenDropDown @bind-Value="model.StaffId"
                            Data="@StaffList"
                            TextProperty="StaffName"
                            ValueProperty="StaffId"
                            class="form-control"
                            Placeholder="Assign to Staff" />
            <label for="staff">Assign to Staff</label>
            <ValidationMessage For="@(() => model.StaffId)" />
        </div>
    </div>


    <div class="row mt-3">
        <div class="col-12">
            <h5>Attachments</h5>
            <InputFile OnChange="OnFileChange" multiple class="form-control" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.png" />
        </div>
    </div>
    @if (existingAttachments.Any())
        {
            <div class="col-12 mt-3">
                <h6>Existing Attachments</h6>
                <ul class="list-group">
                    @foreach (var attachment in existingAttachments)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @attachment.FileName
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveExistingAttachment(attachment)">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
        @if (loadedFiles.Any())
        {
            <div class="col-12 mt-3">
                <h6>New Attachments</h6>
                <ul class="list-group">
                    @foreach (var file in loadedFiles)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @file.Name
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveFile(file)">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
    


</EditForm>





@code {
    private CRM.Data.CustomerInteractions model { get; set; } = new();
    private bool IsSuccess { get; set; }
    private string? Messages { get; set; }
    private long maxFileSize = 1024 * 1024 * 10; // 10MB
    private List<ProjectAttachment> existingAttachments = new();
    private List<IBrowserFile> loadedFiles = new();
    private List<Staff> StaffList { get; set; } = new();


    private async Task OnInitialisedAsync()
    {
        await base.OnInitializedAsync();
    }
    private async Task OnSubmit()
    {
        // try
        // {
        // 	Devices.Id = Guid.NewGuid();
        // 	await dbContext.DeviceTypes.AddAsync(Devices);
        // 	var result = await dbContext.SaveChangesAsync();

        // 	if (result > 0)
        // 	{
        // 		IsSuccess = true;
        // 		Messages = "Device Registered Successfully.";
        // 		Console.WriteLine($"Device Registered: {Devices.Name}, ID: {Devices.Id}");
        // 		Devices = new DeviceType(); // Reset the form

        // 	}
        // 	else
        // 	{
        // 		IsSuccess = false;
        // 		Messages = "Failed to register device. Please try again.";
        // 	}
        // }
        // catch (Exception ex)
        // {
        // 	Messages = $"An error occurred: {ex.Message}";
        // 	IsSuccess = false;
        // }
        await UploadFiles(model.Id);

    }
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        loadedFiles.AddRange(e.GetMultipleFiles());
        StateHasChanged();
    }

    private void RemoveFile(IBrowserFile file)
    {
        loadedFiles.RemoveAll(f => f.Name == file.Name);
        StateHasChanged();
    }

    private async Task UploadFiles(Guid projectId)
    {
        foreach (var file in loadedFiles)
        {
            try
            {
                using var stream = file.OpenReadStream(maxFileSize);
                var blobUrl = await BlobStorageService.UploadFileToBlobAsync(
                    $"{projectId}-{file.Name}",
                    file.ContentType,
                    stream
               );

                var attachment = new ProjectAttachment
                {
                    FileName = file.Name,
                    BlobUrl = blobUrl,
                    ContentType = file.ContentType,
                    UploadedAt = DateTime.UtcNow,
                    ProjectId = projectId
                };

                await dbContext.ProjectAttachments.AddAsync(attachment);
            }
            catch (Exception ex)
            {

                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }

        await dbContext.SaveChangesAsync();
        loadedFiles.Clear();
    }
    private async Task RemoveExistingAttachment(ProjectAttachment attachment)
    {
        try
        {
            // Remove from blob storage
            await BlobStorageService.DeleteFileToBlobAsync($"{attachment.ProjectId}-{attachment.FileName}");

            // Remove from database
            dbContext.ProjectAttachments.Remove(attachment);
            await dbContext.SaveChangesAsync();

            // Remove from local list
            existingAttachments.Remove(attachment);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing attachment {attachment.FileName}: {ex.Message}");
        }
    }
}

