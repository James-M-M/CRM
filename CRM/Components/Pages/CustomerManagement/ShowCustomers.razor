@page "/showcustomers"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CRM.Data
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Customer Management</h3>
        
<div class="mb-3">
    <button class="btn btn-primary" @onclick="@(() => navManager.NavigateTo("/CustomerInfo"))">
        <i class="oi oi-plus"></i> Add New Customer
    </button>
</div>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!Customers.Any())
{
    <div class="alert alert-info" role="alert">
        No customers found. Click 'Add New Customer' to create one.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in Customers)
                {
                    <tr>
                        <td>@customer.Name</td>
                        <td>@customer.EmailContact</td>
                        <td>@customer.PhoneContact</td>
                        <td>@customer.Address</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-warning btn-sm me-1" @onclick="@(() => EditCustomer(customer.CustomerId))" title="Edit Customer">
                                    <i class="oi oi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteCustomer(customer.CustomerId))" title="Delete Customer">
                                    <i class="oi oi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this customer?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Customer> Customers = new();
    private bool loading = true;
    private bool showDeleteConfirmation = false;
    private Guid customerToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (userId is not null)
                {
                    Customers = await dbContext.Customers
                        .Include(c => c.Projects)
                        .Where(c => c.UserID == userId)
                        .ToListAsync();
                }
            }
        }
        finally
        {
            loading = false;
        }
    }

    private void EditCustomer(Guid customerId)
    {
        navManager.NavigateTo($"/EditCustomer/{customerId}");
    }

    private void DeleteCustomer(Guid customerId)
    {
        customerToDelete = customerId;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        customerToDelete = Guid.Empty;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var customer = await dbContext.Customers.FindAsync(customerToDelete);
            if (customer != null)
            {
                dbContext.Customers.Remove(customer);
                await dbContext.SaveChangesAsync();
                await LoadCustomers();
            }
        }
        finally
        {
            showDeleteConfirmation = false;
            customerToDelete = Guid.Empty;
        }
    }
}
