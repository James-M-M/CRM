@page "/EditCustomer/{customerId:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using CRM.Data
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject NavigationManager navManager

<h3>Edit Customer</h3>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (customer == null)
{
    <div class="alert alert-danger" role="alert">
        Customer not found.
    </div>
}
else
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <EditForm Model="customer" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="customer.Name" class="form-control" id="name" placeholder="Customer Name" />
                        <label for="name" class="form-label">Customer Name</label>
                        <ValidationMessage For="@(() => customer.Name)" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="customer.PhoneContact" class="form-control" id="phone" placeholder="Phone Number" />
                        <label for="phone" class="form-label">Phone Contact</label>
                        <ValidationMessage For="@(() => customer.PhoneContact)" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="customer.EmailContact" class="form-control" id="email" placeholder="Email" />
                        <label for="email" class="form-label">Email Contact</label>
                        <ValidationMessage For="@(() => customer.EmailContact)" />
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="customer.Address" class="form-control" id="address" 
                                     placeholder="Address" style="height: 100px" />
                        <label for="address" class="form-label">Address</label>
                        <ValidationMessage For="@(() => customer.Address)" />
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col">
                    <button type="submit" class="btn btn-primary me-2">Save Changes</button>
                    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public Guid customerId { get; set; }

    private Customer? customer;
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomer();
    }

    private async Task LoadCustomer()
    {
        try
        {
            customer = await dbContext.Customers
                .Include(c => c.Projects)
                .FirstOrDefaultAsync(c => c.CustomerId == customerId);

            if (customer == null)
            {
                errorMessage = "Customer not found";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading customer: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            dbContext.Update(customer!);
            await dbContext.SaveChangesAsync();
            NavigateBack();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
        }
    }

    private void NavigateBack()
    {
        navManager.NavigateTo("/showcustomers");
    }
}
