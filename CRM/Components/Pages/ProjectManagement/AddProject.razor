@using CRM.AzureBlobStorage.Interface
@using CRM.Data.DTO
@using Microsoft.AspNetCore.Authorization
@using CRM.Data
@page "/addproject"
@page "/editproject/{ProjectId:guid}"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Forms
@inject IBlobStorageService BlobStorageService

<h3>@(ProjectId == null ? "Add Project" : "Edit Project")</h3>

@if (Message)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @(ProjectId == null ? "Project created successfully!" : "Project updated successfully!")
        <button type="button" class="btn-close" @onclick="() => Message = false" aria-label="Close"></button>
    </div>
}

<EditForm Model="Project" OnValidSubmit="OnSubmit" FormName="project-info">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Project.Name" class="form-control" id="name" placeholder="Project Name" />
                    <label for="name" class="form-label">Project Name</label>
                    <ValidationMessage For="@(() => Project.Name)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Project.Priority" class="form-select" id="priority">
                        @foreach (var priority in Enum.GetValues(typeof(ProjectPriority)))
                        {
                            <option value="@priority">@priority</option>
                        }
                    </InputSelect>
                    <label for="priority" class="form-label">Priority</label>
                    <ValidationMessage For="@(() => Project.Priority)" />
                </div>
            </div>
            <div class="col-12">
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Project.Details" class="form-control" id="details"
                                   placeholder="Project Details" style="height: 100px" />
                    <label for="details" class="form-label">Project Details</label>
                    <ValidationMessage For="@(() => Project.Details)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Project.CustomerId" class="form-select" id="customer">
                        <option value="">Select Customer</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.CustomerId">@customer.Name</option>
                        }
                    </InputSelect>
                    <label for="customer" class="form-label">Customer</label>
                    <ValidationMessage For="@(() => Project.CustomerId)" />
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="Project.HoursSpentOnProject" class="form-control" id="ProjectHoursLogged" placeholder="Project Hours" />
                    <label for="ProjectHoursLogged">Project Hours Logged</label>
                    <ValidationMessage For="@(() => Project.HoursSpentOnProject)" />
                </div>
            </div>
            @if (ProjectId.HasValue)
            {
                <div class="col-md-6">
                    <div class="form-check mb-3">
                        <InputCheckbox class="form-check-input" id="isCompleted" @bind-Value="Project.isCompleted" />
                        <label class="form-check-label" for="isCompleted">Project Completed</label>
                    </div>
                </div>
            }


        </div>
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-primary me-2" type="submit">
                    @(ProjectId == null ? "Create Project" : "Save Changes")
                </button>
                <button class="btn btn-secondary" type="button" @onclick="NavigateToHome">Cancel</button>
            </div>
        </div>
    </div>

    
    <div class="row mt-3">
        <div class="col-12">
            <h5>Attachments</h5>
            <InputFile OnChange="OnFileChange" multiple class="form-control" accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.png" />
        </div>
        @if (existingAttachments.Any())
        {
            <div class="col-12 mt-3">
                <h6>Existing Attachments</h6>
                <ul class="list-group">
                    @foreach (var attachment in existingAttachments)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @attachment.FileName
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveExistingAttachment(attachment)">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
        @if (loadedFiles.Any())
        {
            <div class="col-12 mt-3">
                <h6>New Attachments</h6>
                <ul class="list-group">
                    @foreach (var file in loadedFiles)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @file.Name
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveFile(file)">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? ProjectId { get; set; }
    private Project Project { get; set; } = new();
    private List<Customer> Customers { get; set; } = new();
    private bool Message = false;
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 10; // 10MB
    private List<ProjectAttachment> existingAttachments = new();
    private AddStaffDto Staff { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Customers = await dbContext.Customers.ToListAsync();

        if (ProjectId.HasValue)
        {
            var existingProject = await dbContext.Projects
                .Include(p => p.Attachments)
                .FirstOrDefaultAsync(p => p.ProjectId == ProjectId);
            if (existingProject != null)
            {
                Project = existingProject;
                existingAttachments = existingProject.Attachments.ToList();
            }
        }
    }


    




    private async Task OnSubmit()
    {
        if (Project.isCompleted && Project.ProjectCompleteDate == null)
        {
            Project.ProjectCompleteDate = DateTime.UtcNow;
        }
        else if (!Project.isCompleted)
        {
            Project.ProjectCompleteDate = null;
        }

        if (ProjectId.HasValue)
        {
            Project.LastUpdated = DateTime.UtcNow;
            dbContext.Projects.Update(Project);
        }
        else
        {
            await dbContext.Projects.AddAsync(Project);
        }

        await dbContext.SaveChangesAsync();

        // Upload files after the project is saved
        await UploadFiles(Project.ProjectId);

        Message = true;

        if (!ProjectId.HasValue)
        {
            Project = new();
            loadedFiles.Clear();
        }
        StateHasChanged();
    }


    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        loadedFiles.AddRange(e.GetMultipleFiles());
        StateHasChanged();
    }

    private void RemoveFile(IBrowserFile file)
    {
        loadedFiles.RemoveAll(f => f.Name == file.Name);
        StateHasChanged();
    }

    private async Task UploadFiles(Guid projectId)
    {
        foreach (var file in loadedFiles)
        {
            try
            {
                using var stream = file.OpenReadStream(maxFileSize);
                var blobUrl = await BlobStorageService.UploadFileToBlobAsync(
                    $"{projectId}-{file.Name}",
                    file.ContentType,
                    stream
               );

                var attachment = new ProjectAttachment
                {
                    FileName = file.Name,
                    BlobUrl = blobUrl,
                    ContentType = file.ContentType,
                    UploadedAt = DateTime.UtcNow,
                    ProjectId = projectId
                };

                await dbContext.ProjectAttachments.AddAsync(attachment);
            }
            catch (Exception ex)
            {
                
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }

        await dbContext.SaveChangesAsync();
        loadedFiles.Clear();
    }

    private void NavigateToHome()
    {
        navManager.NavigateTo("/ViewProjects");
    }

    private async Task RemoveExistingAttachment(ProjectAttachment attachment)
    {
        try
        {
            // Remove from blob storage
            await BlobStorageService.DeleteFileToBlobAsync($"{attachment.ProjectId}-{attachment.FileName}");
            
            // Remove from database
            dbContext.ProjectAttachments.Remove(attachment);
            await dbContext.SaveChangesAsync();
            
            // Remove from local list
            existingAttachments.Remove(attachment);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing attachment {attachment.FileName}: {ex.Message}");
        }
    }

}
